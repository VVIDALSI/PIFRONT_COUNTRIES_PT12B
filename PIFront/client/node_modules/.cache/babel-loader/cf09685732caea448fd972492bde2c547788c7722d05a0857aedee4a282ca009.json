{"ast":null,"code":"var _jsxFileName = \"D:\\\\Henry\\\\PI_Countries\\\\PIFRONT_COUNTRIES_PT12B\\\\PIFront\\\\client\\\\src\\\\components\\\\SelectCountries\\\\SelectCountries.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { continents, validCountries } from \"../../vallidations/contries\"; // Actualizamos el nombre de la variable.\nimport stlSC from \"./SelectCountries.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SelectCountries = ({\n  onAccept\n}) => {\n  _s();\n  const [selectedContinents, setSelectedContinents] = useState([]);\n  const handleContinentChange = continent => {\n    if (selectedContinents.includes(continent)) {\n      setSelectedContinents(selectedContinents.filter(c => c !== continent));\n    } else {\n      setSelectedContinents([...selectedContinents, continent]);\n    }\n  };\n  const handleCountryChange = country => {\n    if (selectedCountries.includes(country)) {\n      setSelectedCountries(selectedCountries.filter(c => c !== country));\n    } else {\n      setSelectedCountries([...selectedCountries, country]);\n    }\n  };\n  const filteredCountries = validCountries.filter(country => selectedContinents.length === 0 || selectedContinents.includes(country.continent));\n  const handleCountriesAccept = () => {\n    // Aquí obtenemos los países seleccionados y los enviamos a la función onAccept\n    const countries = filteredCountries.filter(country => selectedCountries.includes(country.name)).map(country => country.name);\n\n    // Llamamos a la función onAccept para entregar el array con los países seleccionados\n    onAccept(countries);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: stlSC.gnrCont,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: stlSC.divContinents,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Continents\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: stlSC.divContinentsUnit,\n        children: continents.map(continent => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: stlSC.boxContinents,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedContinents.includes(continent),\n            onChange: () => handleContinentChange(continent)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: continent\n          }, continent, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: stlSC.divCountries,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Countries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: stlSC.countBox,\n        children: filteredCountries.map(country => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: stlSC.miniBox,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedCountries.includes(country.name),\n            onChange: () => handleCountryChange(country.name)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: country.name\n          }, country.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCountriesAccept,\n        children: \"Accept\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(SelectCountries, \"eINLi7ZnytvnLxQWgnj4N42WqdI=\");\n_c = SelectCountries;\nexport default SelectCountries;\nvar _c;\n$RefreshReg$(_c, \"SelectCountries\");","map":{"version":3,"names":["React","useState","continents","validCountries","stlSC","jsxDEV","_jsxDEV","SelectCountries","onAccept","_s","selectedContinents","setSelectedContinents","handleContinentChange","continent","includes","filter","c","handleCountryChange","country","selectedCountries","setSelectedCountries","filteredCountries","length","handleCountriesAccept","countries","name","map","className","gnrCont","children","divContinents","fileName","_jsxFileName","lineNumber","columnNumber","divContinentsUnit","boxContinents","type","checked","onChange","divCountries","countBox","miniBox","onClick","_c","$RefreshReg$"],"sources":["D:/Henry/PI_Countries/PIFRONT_COUNTRIES_PT12B/PIFront/client/src/components/SelectCountries/SelectCountries.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { continents, validCountries } from \"../../vallidations/contries\"; // Actualizamos el nombre de la variable.\r\nimport stlSC from \"./SelectCountries.module.css\";\r\n\r\nconst SelectCountries = ({ onAccept }) => {\r\n  const [selectedContinents, setSelectedContinents] = useState([]);\r\n  \r\n  \r\n\r\n  const handleContinentChange = (continent) => {\r\n    if (selectedContinents.includes(continent)) {\r\n      setSelectedContinents(selectedContinents.filter((c) => c !== continent));\r\n    } else {\r\n      setSelectedContinents([...selectedContinents, continent]);\r\n    }\r\n  };\r\n\r\n  const handleCountryChange = (country) => {\r\n    if (selectedCountries.includes(country)) {\r\n      setSelectedCountries(selectedCountries.filter((c) => c !== country));\r\n    } else {\r\n      setSelectedCountries([...selectedCountries, country]);\r\n    }\r\n  };\r\n\r\n  const filteredCountries = validCountries.filter(\r\n    (country) =>\r\n      selectedContinents.length === 0 ||\r\n      selectedContinents.includes(country.continent)\r\n  );\r\n\r\n  const handleCountriesAccept = () => {\r\n    // Aquí obtenemos los países seleccionados y los enviamos a la función onAccept\r\n    const countries = filteredCountries\r\n      .filter((country) => selectedCountries.includes(country.name))\r\n      .map((country) => country.name);\r\n  \r\n    // Llamamos a la función onAccept para entregar el array con los países seleccionados\r\n    onAccept(countries);\r\n  };\r\n\r\n  return (\r\n    <div className={stlSC.gnrCont}>\r\n      <div className={stlSC.divContinents}>\r\n        <h2>Continents</h2>\r\n        <div className={stlSC.divContinentsUnit}>\r\n          {continents.map((continent) => (\r\n            <div className={stlSC.boxContinents}>\r\n              <input\r\n                  type=\"checkbox\"\r\n                  checked={selectedContinents.includes(continent)}\r\n                  onChange={() => handleContinentChange(continent)}\r\n                />\r\n              <label key={continent}>\r\n                {continent}\r\n              </label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className={stlSC.divCountries}>\r\n        <h2>Countries</h2>\r\n        <div className={stlSC.countBox}>\r\n          {filteredCountries.map((country) => (\r\n            <div className={stlSC.miniBox}>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={selectedCountries.includes(country.name)}\r\n                onChange={() => handleCountryChange(country.name)}\r\n              />\r\n              <label key={country.name}>{country.name}</label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <button onClick={handleCountriesAccept}>Accept</button>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectCountries;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}