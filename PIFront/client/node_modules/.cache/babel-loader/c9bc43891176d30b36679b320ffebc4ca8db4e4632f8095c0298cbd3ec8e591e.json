{"ast":null,"code":"var _jsxFileName = \"D:\\\\Henry\\\\PI_Countries\\\\PIFront\\\\client\\\\src\\\\components\\\\SearchBar\\\\SearchBar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport stlSB from './SearchBar.module.css';\nimport { useSelector } from \"react-redux\";\nimport { useHistory } from 'react-router-dom';\nimport Modal from 'react-modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBar = () => {\n  _s();\n  const allCountries = useSelector(state => state.countries);\n  const history = useHistory();\n  console.log(allCountries);\n  const [searchInput, setSearchInput] = useState('');\n  const [showModal, setShowModal] = useState(false);\n  const handleSearch = () => {\n    // Buscar el país por ID (searchTerm)\n    const countryById = allCountries.find(country => country.id === searchInput);\n    if (countryById) {\n      // Si se encuentra el país por ID, redirigir a la página de detalle\n      history.push(`/detail/${countryById.id}`);\n    } else {\n      // Si no se encuentra el país por ID, buscar por nombre\n      const countryByName = allCountries.find(country => country.name.toLowerCase() === searchInput.toLowerCase());\n      if (countryByName) {\n        // Si se encuentra el país por nombre, redirigir a la página de detalle\n        history.push(`/detail/${countryByName.id}`);\n      } else {\n        // Si no se encuentra el país por nombre, mostrar el modal\n        setShowModal(true);\n      }\n    }\n  };\n  const closeModal = () => {\n    // Función para cerrar el modal\n    setShowModal(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: stlSB.gnrlContSB,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: searchInput,\n      onChange: e => setSearchInput(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      children: \"Find\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showModal,\n      onRequestClose: closeModal,\n      contentLabel: \"No se encontr\\xF3 el pa\\xEDs\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No se encontr\\xF3 el pa\\xEDs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: closeModal,\n        children: \"Cerrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBar, \"G7aAXEaQ2vDAaemjqcnMLRXCBCQ=\", false, function () {\n  return [useSelector, useHistory];\n});\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","stlSB","useSelector","useHistory","Modal","jsxDEV","_jsxDEV","SearchBar","_s","allCountries","state","countries","history","console","log","searchInput","setSearchInput","showModal","setShowModal","handleSearch","countryById","find","country","id","push","countryByName","name","toLowerCase","closeModal","className","gnrlContSB","children","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isOpen","onRequestClose","contentLabel","_c","$RefreshReg$"],"sources":["D:/Henry/PI_Countries/PIFront/client/src/components/SearchBar/SearchBar.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport stlSB from './SearchBar.module.css';\r\nimport { useSelector  } from \"react-redux\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport Modal from 'react-modal';\r\n\r\nconst SearchBar = () => {\r\n  const allCountries = useSelector((state) => state.countries);\r\n  const history = useHistory();\r\n\r\n  console.log(allCountries);\r\n\r\n  const [searchInput, setSearchInput] = useState('');\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const handleSearch = () => {\r\n    // Buscar el país por ID (searchTerm)\r\n    const countryById = allCountries.find((country) => country.id === searchInput);\r\n\r\n    if (countryById) {\r\n      // Si se encuentra el país por ID, redirigir a la página de detalle\r\n      history.push(`/detail/${countryById.id}`);\r\n    } else {\r\n      // Si no se encuentra el país por ID, buscar por nombre\r\n      const countryByName = allCountries.find(\r\n        (country) => country.name.toLowerCase() === searchInput.toLowerCase()\r\n      );\r\n\r\n      if (countryByName) {\r\n        // Si se encuentra el país por nombre, redirigir a la página de detalle\r\n        history.push(`/detail/${countryByName.id}`);\r\n      } else {\r\n        // Si no se encuentra el país por nombre, mostrar el modal\r\n        setShowModal(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  const closeModal = () => {\r\n    // Función para cerrar el modal\r\n    setShowModal(false);\r\n  };\r\n\r\n  return (\r\n    <div className={stlSB.gnrlContSB}>\r\n        <input\r\n          type=\"text\"\r\n          value={searchInput}\r\n          onChange={(e) => setSearchInput(e.target.value)}\r\n        />\r\n        <button onClick={handleSearch}>Find</button>\r\n\r\n        {/* Modal para mostrar el mensaje */}\r\n      <Modal\r\n        isOpen={showModal}\r\n        onRequestClose={closeModal}\r\n        contentLabel=\"No se encontró el país\"\r\n      >\r\n        <h2>No se encontró el país</h2>\r\n        <button onClick={closeModal}>Cerrar</button>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBar"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}