{"ast":null,"code":"var _jsxFileName = \"D:\\\\Henry\\\\PI_Countries\\\\PIFRONT_COUNTRIES_PT12B\\\\PIFront\\\\client\\\\src\\\\components\\\\Countries\\\\Countries.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getCountries } from \"../../redux/actions/index\";\nimport Country from \"../Country/Country\";\nimport stlCountries from \"../Countries/Countries.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Countries = () => {\n  _s();\n  const allCountries = useSelector(state => state.countries);\n  const selectedContinent = useSelector(state => state.selectedContinent);\n  const selectedActivity = useSelector(state => state.selectedActivity);\n  const activities = useSelector(state => state.activities);\n  const selectedSortType = useSelector(state => state.sortType); // Obtener el tipo de ordenamiento\n  const dispatch = useDispatch();\n  const [currentPage, setCurrentPage] = useState(0);\n  useEffect(() => {\n    dispatch(getCountries());\n  }, []);\n  const countriesPerPage = 10;\n  const selectedActivityData = activities.find(activity => activity.name === selectedActivity);\n  const countriesOfActivity = selectedActivityData ? selectedActivityData.countries : [];\n  let filteredCountries = allCountries;\n  if (selectedActivityData !== undefined) {\n    const activityCountries = selectedActivityData.countries;\n    if (activityCountries.length > 0) {\n      filteredCountries = filteredCountries.filter(country => activityCountries.includes(country.name));\n    }\n  }\n  if (selectedContinent !== \"All\") {\n    filteredCountries = filteredCountries.filter(country => country.continent === selectedContinent);\n  }\n\n  // Realizar el ordenamiento de los países según el tipo seleccionado\n  const sortedCountries = [...filteredCountries]; // Crear una copia para no modificar el estado original\n\n  switch (selectedSortType) {\n    case \"ascendantAlf\":\n      sortedCountries.sort((a, b) => a.name.localeCompare(b.name));\n      break;\n    case \"descendingAlf\":\n      sortedCountries.sort((a, b) => b.name.localeCompare(a.name));\n      break;\n    case \"asendingPob\":\n      sortedCountries.sort((a, b) => a.population - b.population);\n      break;\n    case \"descendingPob\":\n      sortedCountries.sort((a, b) => b.population - a.population);\n      break;\n    default:\n      break;\n  }\n  const totalPages = Math.ceil(sortedCountries.length / countriesPerPage);\n  const handleNext = () => {\n    if (currentPage < totalPages - 1) {\n      setCurrentPage(prevPage => prevPage + 1);\n    }\n  };\n  const handlePrevious = () => {\n    if (currentPage > 0) {\n      setCurrentPage(prevPage => prevPage - 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: stlCountries.CountriesGnrl,\n      children: sortedCountries.slice(currentPage * countriesPerPage, (currentPage + 1) * countriesPerPage).map(c => /*#__PURE__*/_jsxDEV(Country, {\n        id: c.id,\n        name: c.name,\n        flag: c.flag,\n        region: c.subregion,\n        population: c.population\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: stlCountries.btnprev,\n        onClick: handlePrevious,\n        disabled: currentPage === 0,\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: stlCountries.btnpot,\n        children: [\"Page \", currentPage + 1, \" of \", totalPages]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: stlCountries.btnnext,\n        onClick: handleNext,\n        disabled: currentPage === totalPages - 1,\n        children: \"\\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(Countries, \"8h9Wg2lRxt+rWciDdadscPpPuxI=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n_c = Countries;\nexport default Countries;\nvar _c;\n$RefreshReg$(_c, \"Countries\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","getCountries","Country","stlCountries","jsxDEV","_jsxDEV","Countries","_s","allCountries","state","countries","selectedContinent","selectedActivity","activities","selectedSortType","sortType","dispatch","currentPage","setCurrentPage","countriesPerPage","selectedActivityData","find","activity","name","countriesOfActivity","filteredCountries","undefined","activityCountries","length","filter","country","includes","continent","sortedCountries","sort","a","b","localeCompare","population","totalPages","Math","ceil","handleNext","prevPage","handlePrevious","children","className","CountriesGnrl","slice","map","c","id","flag","region","subregion","fileName","_jsxFileName","lineNumber","columnNumber","btnprev","onClick","disabled","btnpot","btnnext","_c","$RefreshReg$"],"sources":["D:/Henry/PI_Countries/PIFRONT_COUNTRIES_PT12B/PIFront/client/src/components/Countries/Countries.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getCountries } from \"../../redux/actions/index\";\r\nimport Country from \"../Country/Country\";\r\nimport stlCountries from \"../Countries/Countries.module.css\";\r\n\r\nconst Countries = () => {\r\n  const allCountries = useSelector((state) => state.countries);\r\n  const selectedContinent = useSelector((state) => state.selectedContinent);\r\n  const selectedActivity = useSelector((state) => state.selectedActivity);\r\n  const activities = useSelector((state) => state.activities);\r\n  const selectedSortType = useSelector((state) => state.sortType); // Obtener el tipo de ordenamiento\r\n  const dispatch = useDispatch();\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n\r\n  useEffect(() => {\r\n    dispatch(getCountries());\r\n  }, []);\r\n\r\n  const countriesPerPage = 10;\r\n\r\n  const selectedActivityData = activities.find(\r\n    (activity) => activity.name === selectedActivity\r\n  );\r\n\r\n  const countriesOfActivity = selectedActivityData\r\n    ? selectedActivityData.countries\r\n    : [];\r\n\r\n  let filteredCountries = allCountries;\r\n\r\n  if (selectedActivityData !== undefined) {\r\n    const activityCountries = selectedActivityData.countries;\r\n    if (activityCountries.length > 0) {\r\n      filteredCountries = filteredCountries.filter((country) => activityCountries.includes(country.name));\r\n    }\r\n  }\r\n  \r\n  if (selectedContinent !== \"All\") {\r\n    filteredCountries = filteredCountries.filter((country) => country.continent === selectedContinent);\r\n  }\r\n\r\n  // Realizar el ordenamiento de los países según el tipo seleccionado\r\n  const sortedCountries = [...filteredCountries]; // Crear una copia para no modificar el estado original\r\n\r\n  switch (selectedSortType) {\r\n    case \"ascendantAlf\":\r\n      sortedCountries.sort((a, b) => a.name.localeCompare(b.name));\r\n      break;\r\n    case \"descendingAlf\":\r\n      sortedCountries.sort((a, b) => b.name.localeCompare(a.name));\r\n      break;\r\n    case \"asendingPob\":\r\n      sortedCountries.sort((a, b) => a.population - b.population);\r\n      break;\r\n    case \"descendingPob\":\r\n      sortedCountries.sort((a, b) => b.population - a.population);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  const totalPages = Math.ceil(sortedCountries.length / countriesPerPage);\r\n\r\n  const handleNext = () => {\r\n    if (currentPage < totalPages - 1) {\r\n      setCurrentPage((prevPage) => prevPage + 1);\r\n    }\r\n  };\r\n\r\n  const handlePrevious = () => {\r\n    if (currentPage > 0) {\r\n      setCurrentPage((prevPage) => prevPage - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={stlCountries.CountriesGnrl}>\r\n        {sortedCountries\r\n          .slice(\r\n            currentPage * countriesPerPage,\r\n            (currentPage + 1) * countriesPerPage\r\n          )\r\n          .map((c) => (\r\n            <Country\r\n              key={c.id}\r\n              id={c.id}\r\n              name={c.name}\r\n              flag={c.flag}\r\n              region={c.subregion}\r\n              population={c.population}\r\n            />\r\n          ))}\r\n      </div>\r\n      <div>\r\n        <button\r\n          className={stlCountries.btnprev}\r\n          onClick={handlePrevious}\r\n          disabled={currentPage === 0}\r\n        >\r\n          ←\r\n        </button>\r\n        <button className={stlCountries.btnpot}>\r\n          Page {currentPage + 1} of {totalPages}\r\n        </button>\r\n        <button\r\n          className={stlCountries.btnnext}\r\n          onClick={handleNext}\r\n          disabled={currentPage === totalPages - 1}\r\n        >\r\n          →\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Countries;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}