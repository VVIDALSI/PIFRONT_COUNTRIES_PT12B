{"ast":null,"code":"var _jsxFileName = \"D:\\\\Henry\\\\PI_Countries\\\\PIFRONT_COUNTRIES_PT12B\\\\PIFront\\\\client\\\\src\\\\components\\\\Countries\\\\Countries.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getCountries } from \"../../redux/actions/index\";\nimport Country from \"../Country/Country\";\nimport stlCountries from \"../Countries/Countries.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Countries = () => {\n  _s();\n  const allCountries = useSelector(state => state.countries);\n  const selectedContinent = useSelector(state => state.selectedContinent);\n  const selectedActivity = useSelector(state => state.selectedActivity);\n  const activities = useSelector(state => state.activities);\n  const selectedSortType = useSelector(state => state.sortType); // Obtener el tipo de ordenamiento\n  const dispatch = useDispatch();\n  const [currentPage, setCurrentPage] = useState(0);\n  useEffect(() => {\n    dispatch(getCountries());\n  }, []);\n  const countriesPerPage = 10;\n  console.log(selectedActivity);\n  console.log(activities);\n\n  // Filtrar los países según el continente seleccionado\n  const filteredCountries = selectedContinent === \"All\" ? allCountries : allCountries.filter(c => c.continent === selectedContinent);\n\n  // Realizar el ordenamiento de los países según el tipo seleccionado\n  const sortedCountries = [...filteredCountries]; // Crear una copia para no modificar el estado original\n\n  switch (selectedSortType) {\n    case \"ascendantAlf\":\n      sortedCountries.sort((a, b) => a.name.localeCompare(b.name));\n      break;\n    case \"descendingAlf\":\n      sortedCountries.sort((a, b) => b.name.localeCompare(a.name));\n      break;\n    case \"asendingPob\":\n      sortedCountries.sort((a, b) => a.population - b.population);\n      break;\n    case \"descendingPob\":\n      sortedCountries.sort((a, b) => b.population - a.population);\n      break;\n    default:\n      break;\n  }\n  const totalPages = Math.ceil(sortedCountries.length / countriesPerPage);\n  const handleNext = () => {\n    if (currentPage < totalPages - 1) {\n      setCurrentPage(prevPage => prevPage + 1);\n    }\n  };\n  const handlePrevious = () => {\n    if (currentPage > 0) {\n      setCurrentPage(prevPage => prevPage - 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: stlCountries.CountriesGnrl,\n      children: sortedCountries.slice(currentPage * countriesPerPage, (currentPage + 1) * countriesPerPage).map(c => /*#__PURE__*/_jsxDEV(Country, {\n        id: c.id,\n        name: c.name,\n        flag: c.flag,\n        region: c.subregion,\n        population: c.population\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: stlCountries.btnprev,\n        onClick: handlePrevious,\n        disabled: currentPage === 0,\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: stlCountries.btnpot,\n        children: [\"Page \", currentPage + 1, \" of \", totalPages]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: stlCountries.btnnext,\n        onClick: handleNext,\n        disabled: currentPage === totalPages - 1,\n        children: \"\\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(Countries, \"8h9Wg2lRxt+rWciDdadscPpPuxI=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n_c = Countries;\nexport default Countries;\nvar _c;\n$RefreshReg$(_c, \"Countries\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","getCountries","Country","stlCountries","jsxDEV","_jsxDEV","Countries","_s","allCountries","state","countries","selectedContinent","selectedActivity","activities","selectedSortType","sortType","dispatch","currentPage","setCurrentPage","countriesPerPage","console","log","filteredCountries","filter","c","continent","sortedCountries","sort","a","b","name","localeCompare","population","totalPages","Math","ceil","length","handleNext","prevPage","handlePrevious","children","className","CountriesGnrl","slice","map","id","flag","region","subregion","fileName","_jsxFileName","lineNumber","columnNumber","btnprev","onClick","disabled","btnpot","btnnext","_c","$RefreshReg$"],"sources":["D:/Henry/PI_Countries/PIFRONT_COUNTRIES_PT12B/PIFront/client/src/components/Countries/Countries.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getCountries } from \"../../redux/actions/index\";\r\nimport Country from \"../Country/Country\";\r\nimport stlCountries from \"../Countries/Countries.module.css\";\r\n\r\nconst Countries = () => {\r\n  const allCountries = useSelector((state) => state.countries);\r\n  const selectedContinent = useSelector((state) => state.selectedContinent);\r\n  const selectedActivity = useSelector((state) => state.selectedActivity);\r\n  const activities = useSelector((state) => state.activities);\r\n  const selectedSortType = useSelector((state) => state.sortType); // Obtener el tipo de ordenamiento\r\n  const dispatch = useDispatch();\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n\r\n  useEffect(() => {\r\n    dispatch(getCountries());\r\n  }, []);\r\n\r\n  const countriesPerPage = 10;\r\n\r\n  console.log(selectedActivity);\r\n  console.log(activities);\r\n\r\n  // Filtrar los países según el continente seleccionado\r\n  const filteredCountries = selectedContinent === \"All\"\r\n    ? allCountries\r\n    : allCountries.filter(c => c.continent === selectedContinent);\r\n\r\n  // Realizar el ordenamiento de los países según el tipo seleccionado\r\n  const sortedCountries = [...filteredCountries]; // Crear una copia para no modificar el estado original\r\n\r\n  switch (selectedSortType) {\r\n    case \"ascendantAlf\":\r\n      sortedCountries.sort((a, b) => a.name.localeCompare(b.name));\r\n      break;\r\n    case \"descendingAlf\":\r\n      sortedCountries.sort((a, b) => b.name.localeCompare(a.name));\r\n      break;\r\n    case \"asendingPob\":\r\n      sortedCountries.sort((a, b) => a.population - b.population);\r\n      break;\r\n    case \"descendingPob\":\r\n      sortedCountries.sort((a, b) => b.population - a.population);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  const totalPages = Math.ceil(sortedCountries.length / countriesPerPage);\r\n\r\n  const handleNext = () => {\r\n    if (currentPage < totalPages - 1) {\r\n      setCurrentPage((prevPage) => prevPage + 1);\r\n    }\r\n  };\r\n\r\n  const handlePrevious = () => {\r\n    if (currentPage > 0) {\r\n      setCurrentPage((prevPage) => prevPage - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={stlCountries.CountriesGnrl}>\r\n        {sortedCountries\r\n          .slice(\r\n            currentPage * countriesPerPage,\r\n            (currentPage + 1) * countriesPerPage\r\n          )\r\n          .map((c) => (\r\n            <Country\r\n              key={c.id}\r\n              id={c.id}\r\n              name={c.name}\r\n              flag={c.flag}\r\n              region={c.subregion}\r\n              population={c.population}\r\n            />\r\n          ))}\r\n      </div>\r\n      <div>\r\n        <button className={stlCountries.btnprev} onClick={handlePrevious} disabled={currentPage === 0}>\r\n          ←\r\n        </button>\r\n        <button className={stlCountries.btnpot}>Page {currentPage + 1} of {totalPages}</button>\r\n        <button className={stlCountries.btnnext} onClick={handleNext} disabled={currentPage === totalPages - 1}>\r\n          →\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Countries;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}