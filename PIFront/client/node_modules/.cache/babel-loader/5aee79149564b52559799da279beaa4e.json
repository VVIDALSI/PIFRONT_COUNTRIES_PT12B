{"ast":null,"code":"var _jsxFileName = \"D:\\\\Henry\\\\PI_Countries\\\\PIFront\\\\client\\\\src\\\\components\\\\Countries\\\\Countries.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getCountries } from \"../../redux/actions/index\";\n\n// Paso 1: Eliminar el array hardcodeado\n// const characters = [\n//     {id: 1, name: \"Elmer\"},\n//     {id: 2, name: \"Victor\"},\n//     {id: 3, name: \"Victoria\"},\n// ];\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardsFunc = () => {\n  _s();\n  const characters = useSelector(state => state.characters); //Paso 3\n  const dispatch = useDispatch();\n  const [currentPage, setCurrentPage] = useState(0);\n  useEffect(() => {\n    dispatch(getCharacters());\n  }, []);\n\n  //aqui paginado\n  const handleNext = () => {\n    // Avanzamos a la siguiente página solo si no estamos en la última página\n    if (currentPage < characters.length / 2 - 1) {\n      setCurrentPage(prevPage => prevPage + 1);\n    }\n  };\n  const handlePrevious = () => {\n    // Retrocedemos a la página anterior solo si no estamos en la primera página\n    if (currentPage > 0) {\n      setCurrentPage(prevPage => prevPage - 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cards Func\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: characters.slice(currentPage * 2, currentPage * 2 + 2).map(character => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: character.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: character.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this)]\n      }, character.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePrevious,\n        disabled: currentPage === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNext,\n        disabled: currentPage === characters.length / 2 - 1,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(CardsFunc, \"AP8fRg2gQQUoGYji+KI+xMG2qyE=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = CardsFunc;\nexport default CardsFunc;\nvar _c;\n$RefreshReg$(_c, \"CardsFunc\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","getCountries","jsxDEV","_jsxDEV","CardsFunc","_s","characters","state","dispatch","currentPage","setCurrentPage","getCharacters","handleNext","length","prevPage","handlePrevious","children","fileName","_jsxFileName","lineNumber","columnNumber","slice","map","character","name","email","id","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/Henry/PI_Countries/PIFront/client/src/components/Countries/Countries.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getCountries } from \"../../redux/actions/index\";\r\n\r\n// Paso 1: Eliminar el array hardcodeado\r\n// const characters = [\r\n//     {id: 1, name: \"Elmer\"},\r\n//     {id: 2, name: \"Victor\"},\r\n//     {id: 3, name: \"Victoria\"},\r\n// ];\r\n\r\nconst CardsFunc = () => {\r\n  const characters = useSelector((state) => state.characters); //Paso 3\r\n  const dispatch = useDispatch();\r\n\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n\r\n  useEffect(() => {\r\n    dispatch(getCharacters());\r\n  }, []);\r\n\r\n  //aqui paginado\r\n  const handleNext = () => {\r\n    // Avanzamos a la siguiente página solo si no estamos en la última página\r\n    if (currentPage < characters.length / 2 - 1) {\r\n      setCurrentPage((prevPage) => prevPage + 1);\r\n    }\r\n  };\r\n\r\n  const handlePrevious = () => {\r\n    // Retrocedemos a la página anterior solo si no estamos en la primera página\r\n    if (currentPage > 0) {\r\n      setCurrentPage((prevPage) => prevPage - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Cards Func</h1>\r\n      <div>\r\n        {/* Mostramos los dos personajes correspondientes a la página actual */}\r\n        {characters\r\n          .slice(currentPage * 2, currentPage * 2 + 2)\r\n          .map((character) => (\r\n            <div key={character.id}>\r\n              <h2>{character.name}</h2>\r\n              <p>{character.email}</p>\r\n            </div>\r\n          ))}\r\n      </div>\r\n      <div>\r\n        <button onClick={handlePrevious} disabled={currentPage === 0}>\r\n          Previous\r\n        </button>\r\n        <button onClick={handleNext} disabled={currentPage === characters.length / 2 - 1}>\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardsFunc;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}