{"ast":null,"code":"var _jsxFileName = \"D:\\\\Henry\\\\PI_Countries\\\\PIFRONT_COUNTRIES_PT12B\\\\PIFront\\\\client\\\\src\\\\components\\\\SelectCountries\\\\SelectCountries.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { continents, validCountries } from '../../vallidations/contries'; // Actualizamos el nombre de la variable.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SelectCountries = () => {\n  _s();\n  const [selectedContinents, setSelectedContinents] = useState([]);\n  const [selectedCountries, setSelectedCountries] = useState([]);\n  const handleContinentChange = continent => {\n    if (selectedContinents.includes(continent)) {\n      setSelectedContinents(selectedContinents.filter(c => c !== continent));\n    } else {\n      setSelectedContinents([...selectedContinents, continent]);\n    }\n  };\n  const handleCountryChange = country => {\n    if (selectedCountries.includes(country)) {\n      setSelectedCountries(selectedCountries.filter(c => c !== country));\n    } else {\n      setSelectedCountries([...selectedCountries, country]);\n    }\n  };\n  const filteredCountries = validCountries.filter(country => selectedContinents.length === 0 || selectedContinents.includes(country.continent));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Continents\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), continents.map(continent => /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: selectedContinents.includes(continent),\n        onChange: () => handleContinentChange(continent)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), continent]\n    }, continent, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Countries\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), validCountries.map(country => /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: selectedCountries.includes(country.name),\n        onChange: () => handleCountryChange(country.name)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), country.name]\n    }, country.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFilterButtonClick,\n      children: \"Filter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(SelectCountries, \"QbT+EAAY8bMg4v2NWdZAzsac5mk=\");\n_c = SelectCountries;\nexport default SelectCountries;\nvar _c;\n$RefreshReg$(_c, \"SelectCountries\");","map":{"version":3,"names":["React","useState","continents","validCountries","jsxDEV","_jsxDEV","SelectCountries","_s","selectedContinents","setSelectedContinents","selectedCountries","setSelectedCountries","handleContinentChange","continent","includes","filter","c","handleCountryChange","country","filteredCountries","length","children","fileName","_jsxFileName","lineNumber","columnNumber","map","type","checked","onChange","name","onClick","handleFilterButtonClick","_c","$RefreshReg$"],"sources":["D:/Henry/PI_Countries/PIFRONT_COUNTRIES_PT12B/PIFront/client/src/components/SelectCountries/SelectCountries.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { continents, validCountries } from '../../vallidations/contries';// Actualizamos el nombre de la variable.\r\n\r\nconst SelectCountries = () => {\r\n  const [selectedContinents, setSelectedContinents] = useState([]);\r\n  const [selectedCountries, setSelectedCountries] = useState([]);\r\n\r\n  const handleContinentChange = (continent) => {\r\n    if (selectedContinents.includes(continent)) {\r\n      setSelectedContinents(selectedContinents.filter((c) => c !== continent));\r\n    } else {\r\n      setSelectedContinents([...selectedContinents, continent]);\r\n    }\r\n  };\r\n\r\n  const handleCountryChange = (country) => {\r\n    if (selectedCountries.includes(country)) {\r\n      setSelectedCountries(selectedCountries.filter((c) => c !== country));\r\n    } else {\r\n      setSelectedCountries([...selectedCountries, country]);\r\n    }\r\n  };\r\n\r\n  const filteredCountries = validCountries.filter((country) =>\r\n    selectedContinents.length === 0 || selectedContinents.includes(country.continent)\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <h2>Continents</h2>\r\n      {continents.map((continent) => (\r\n        <label key={continent}>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={selectedContinents.includes(continent)}\r\n            onChange={() => handleContinentChange(continent)}\r\n          />\r\n          {continent}\r\n        </label>\r\n      ))}\r\n\r\n      <h2>Countries</h2>\r\n      {validCountries.map((country) => (\r\n        <label key={country.name}>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={selectedCountries.includes(country.name)}\r\n            onChange={() => handleCountryChange(country.name)}\r\n          />\r\n          {country.name}\r\n        </label>\r\n      ))}\r\n\r\n      <button onClick={handleFilterButtonClick}>Filter</button>\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default SelectCountries;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}